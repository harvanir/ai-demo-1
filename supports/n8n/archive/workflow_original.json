{
  "name": "WA Local Agent (Original)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "wa/incoming",
        "options": {}
      },
      "id": "HTTPTrigger",
      "name": "HTTP Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [260, 260]
    },
    {
      "parameters": {
        "functionCode": "// Resilient reader: support payloads where the webhook body is nested under `body` (string or object)\nvar raw = items[0].json || {};\nvar payload = raw;\ntry {\n  if (payload && typeof payload.body === 'string') {\n    try { payload = JSON.parse(payload.body); } catch (e) { /* ignore parse errors */ }\n  } else if (payload && typeof payload.body === 'object' && payload.body !== null) {\n    payload = payload.body;\n  }\n} catch (e) { /* ignore */ }\nvar text = '';\nvar from = '';\ntry {\n  var entries = payload.entry;\n  if (Array.isArray(entries) && entries.length > 0) {\n    var changes = entries[0].changes;\n    if (Array.isArray(changes) && changes.length > 0) {\n      var value = changes[0].value;\n      var messages = value && value.messages;\n      if (Array.isArray(messages) && messages.length > 0) {\n        var msg = messages[0];\n        if (msg && msg.text && msg.text.body) text = msg.text.body;\n        if (msg && msg.from) from = msg.from;\n      }\n    }\n  }\n} catch (e) { /* ignore */ }\n// Return parsed fields plus raw/payload for debugging\nreturn [{ json: { user_text: text, from: from, _raw: raw, _payload: payload } }];"
    },
    {
      "parameters": {
        "functionCode": "// Build exact body string for Ollama with fallbacks and debug info\nconst envModel = $env.OLLAMA_MODEL || 'llama3:8b-instruct-q4_0';\nlet user_text = $json.user_text || '';\nlet source = user_text ? 'user_text' : null;\ntry {\n  const candidates = [$json._payload, $json._raw, $json];\n  for (const cand of candidates) {\n    if (user_text) break;\n    if (!cand) continue;\n    let p = cand;\n    if (typeof p === 'string') { try { p = JSON.parse(p); } catch (e) { /* ignore */ } }\n    try {\n      const entries = p && p.entry;\n      if (Array.isArray(entries) && entries.length > 0) {\n        const changes = entries[0].changes;\n        if (Array.isArray(changes) && changes.length > 0) {\n          const value = changes[0].value;\n          const messages = value && value.messages;\n          if (Array.isArray(messages) && messages.length > 0) {\n            const msg = messages[0];\n            if (msg && msg.text && msg.text.body) { user_text = msg.text.body; source = 'payload.entry'; break; }\n            if (msg && msg.body && typeof msg.body === 'string') { user_text = msg.body; source = 'payload.entry.msg.body'; break; }\n          }\n        }\n      }\n    } catch(e) { /* ignore per-candidate */ }\n  }\n} catch(e) { /* ignore */ }\nif (!user_text) { // final fallback: look for common keys\n  if ($json && $json.message && typeof $json.message === 'string') { user_text = $json.message; source = 'message'; }\n}\nconst payload = {\n  model: envModel,\n  messages: [\n    { role: 'system', content: 'Kamu adalah agen lokal. Jawab singkat, jelas, sopan. Jika perlu langkah, beri bullet. Bahasa Indonesia.' },\n    { role: 'user', content: user_text || '' }\n  ],\n  temperature: 0.2\n};\nreturn [{ json: { bodyString: JSON.stringify(payload), bodyObject: payload, user_text_used: user_text, user_text_source: source, _input: $json } }];"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://ollama:11434/v1/chat/completions",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.bodyObject }}",
        "options": {}
      },
      "id": "OllamaChat",
      "name": "Ollama Chat",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1040, 260]
    },
    {
      "parameters": {
        "functionCode": "// Ambil jawaban dari Ollama, tapi pertahankan konteks lama via spread $json\nconst res = items[0].json;\nlet answer = '';\nif (res && res.message && res.message.content) answer = res.message.content;\nelse if (Array.isArray(res && res.choices)) answer = (res.choices && res.choices[0] && res.choices[0].message && res.choices[0].message.content) || '';\nreturn [{ json: { ...$json, final_answer: answer } }];"
    },
    {
      "parameters": {
        "url": "=https://graph.facebook.com/v20.0/{{ $json.phone_number_id || $env.PHONE_NUMBER_ID }}/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "jsonParameters": true,
        "requestMethod": "POST",
        "sendBody": true,
        "bodyParametersJson": "={\n  \"messaging_product\": \"whatsapp\",\n  \"to\": \"{{ $json.from }}\",\n  \"type\": \"text\",\n  \"text\": { \"body\": \"{{ ...$json, $json.final_answer || '' }}\" }\n}"
      },
      "id": "Send WhatsApp",
      "name": "Send WhatsApp",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1560, 260],
      "credentials": {
        "httpHeaderAuth": {
          "id": "wa-token",
          "name": "WA Header Auth"
        }
      }
    },
    {
      "parameters": {},
      "id": "Return",
      "name": "Return",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1800, 260]
    }
  ],
  "connections": {
    "HTTP Trigger": { "main": [[{ "node": "Normalize Payload", "type": "main", "index": 0 }]] },
    "Normalize Payload": { "main": [[{ "node": "Build Ollama Body", "type": "main", "index": 0 }]] },
    "Build Ollama Body": { "main": [[{ "node": "Ollama Chat", "type": "main", "index": 0 }]] },
    "Ollama Chat": { "main": [[{ "node": "Format Answer", "type": "main", "index": 0 }]] },
    "Format Answer": { "main": [[{ "node": "Send WhatsApp", "type": "main", "index": 0 }]] },
    "Send WhatsApp": { "main": [[{ "node": "Return", "type": "main", "index": 0 }]] }
  },
  "settings": { "executionOrder": "v1", "saveManualExecutions": true }
}
  "name": "WA Local Agent (Original)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "wa/incoming",
        "options": {}
      },
      "id": "HTTPTrigger",
      "name": "HTTP Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [260, 260]
    },
    {
      "parameters": {
        "functionCode": "// Resilient reader: support payloads where the webhook body is nested under `body` (string or object)\\nvar raw = items[0].json || {};\\nvar payload = raw;\\ntry {\\n  if (payload && typeof payload.body === 'string') {\\n    try { payload = JSON.parse(payload.body); } catch (e) { /* ignore parse errors */ }\\n  } else if (payload && typeof payload.body === 'object' && payload.body !== null) {\\n    payload = payload.body;\\n  }\\n} catch (e) { /* ignore */ }\\nvar text = '';\\nvar from = '';\\ntry {\\n  var entries = payload.entry;\\n  if (Array.isArray(entries) && entries.length > 0) {\\n    var changes = entries[0].changes;\\n    if (Array.isArray(changes) && changes.length > 0) {\\n      var value = changes[0].value;\\n      var messages = value && value.messages;\\n      if (Array.isArray(messages) && messages.length > 0) {\\n        var msg = messages[0];\\n        if (msg && msg.text && msg.text.body) text = msg.text.body;\\n        if (msg && msg.from) from = msg.from;\\n      }\\n    }\\n  }\\n} catch (e) { /* ignore */ }\\n// Return parsed fields plus raw/payload for debugging\\nreturn [{ json: { user_text: text, from: from, _raw: raw, _payload: payload } }];"
      },
      "id": "Normalize",
      "name": "Normalize Payload",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [520, 260]
    },
    {
      "parameters": {
        "functionCode": "// Build exact body string for Ollama with fallbacks and debug info\\nconst envModel = $env.OLLAMA_MODEL || 'llama3:8b-instruct-q4_0';\\nlet user_text = $json.user_text || '';\\nlet source = user_text ? 'user_text' : null;\\ntry {\\n  const candidates = [$json._payload, $json._raw, $json];\\n  for (const cand of candidates) {\\n    if (user_text) break;\\n    if (!cand) continue;\\n    let p = cand;\\n    if (typeof p === 'string') { try { p = JSON.parse(p); } catch (e) { /* ignore */ } }\\n    try {\\n      const entries = p && p.entry;\\n      if (Array.isArray(entries) && entries.length > 0) {\\n        const changes = entries[0].changes;\\n        if (Array.isArray(changes) && changes.length > 0) {\\n          const value = changes[0].value;\\n          const messages = value && value.messages;\\n          if (Array.isArray(messages) && messages.length > 0) {\\n            const msg = messages[0];\\n            if (msg && msg.text && msg.text.body) { user_text = msg.text.body; source = 'payload.entry'; break; }\\n            if (msg && msg.body && typeof msg.body === 'string') { user_text = msg.body; source = 'payload.entry.msg.body'; break; }\\n          }\\n        }\\n      }\\n    } catch(e) { /* ignore per-candidate */ }\\n  }\\n} catch(e) { /* ignore */ }\\nif (!user_text) { // final fallback: look for common keys\\n  if ($json && $json.message && typeof $json.message === 'string') { user_text = $json.message; source = 'message'; }\\n}\\nconst payload = {\\n  model: envModel,\\n  messages: [\\n    { role: 'system', content: 'Kamu adalah agen lokal. Jawab singkat, jelas, sopan. Jika perlu langkah, beri bullet. Bahasa Indonesia.' },\\n    { role: 'user', content: user_text || '' }\\n  ],\\n  temperature: 0.2\\n};\\nreturn [{ json: { bodyString: JSON.stringify(payload), bodyObject: payload, user_text_used: user_text, user_text_source: source, _input: $json } }];"
      },
      "id": "BuildBody",
      "name": "Build Ollama Body",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [780, 260]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://ollama:11434/v1/chat/completions",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.bodyObject }}",
        "options": {}
      },
      "id": "OllamaChat",
      "name": "Ollama Chat",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1040, 260]
    },
    {
      "parameters": {
        "functionCode": "// Ambil jawaban dari Ollama, tapi pertahankan konteks lama via spread $json\\nconst res = items[0].json;\\nlet answer = '';\\nif (res && res.message && res.message.content) answer = res.message.content;\\nelse if (Array.isArray(res && res.choices)) answer = (res.choices && res.choices[0] && res.choices[0].message && res.choices[0].message.content) || '';\\nreturn [{ json: { ...$json, final_answer: answer } }];"
      },
      "id": "FormatAnswer",
      "name": "Format Answer",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1320, 260]
    },
    {
      "parameters": {
        "url": "=https://graph.facebook.com/v20.0/{{ $json.phone_number_id || $env.PHONE_NUMBER_ID }}/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "jsonParameters": true,
        "requestMethod": "POST",
        "sendBody": true,
        "bodyParametersJson": "={\\n  \\\"messaging_product\\\": \\\"whatsapp\\\",\\n  \\\"to\\\": \\\"{{ $json.from }}\\\",\\n  \\\"type\\\": \\\"text\\\",\\n  \\\"text\\\": { \\\"body\\\": \\\"{{ ...$json, $json.final_answer || '' }}\\\" }\\n}"
      },
      "id": "Send WhatsApp",
      "name": "Send WhatsApp",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1560, 260],
      "credentials": {
        "httpHeaderAuth": {
          "id": "wa-token",
          "name": "WA Header Auth"
        }
      }
    },
    {
      "parameters": {},
      "id": "Return",
      "name": "Return",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1800, 260]
    }
  ],
  "connections": {
    "HTTP Trigger": { "main": [[{ "node": "Normalize Payload", "type": "main", "index": 0 }]] },
    "Normalize Payload": { "main": [[{ "node": "Build Ollama Body", "type": "main", "index": 0 }]] },
    "Build Ollama Body": { "main": [[{ "node": "Ollama Chat", "type": "main", "index": 0 }]] },
    "Ollama Chat": { "main": [[{ "node": "Format Answer", "type": "main", "index": 0 }]] },
    "Format Answer": { "main": [[{ "node": "Send WhatsApp", "type": "main", "index": 0 }]] },
    "Send WhatsApp": { "main": [[{ "node": "Return", "type": "main", "index": 0 }]] }
  },
  "settings": { "executionOrder": "v1", "saveManualExecutions": true }
}
