{
  "name": "WA Local Agent (Sender)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "wa/incoming",
        "options": {}
      },
      "id": "HTTPTrigger",
      "name": "HTTP Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        752,
        -224
      ],
      "webhookId": "11123259-3feb-4b55-aaba-66597780fe5a"
    },
    {
      "parameters": {
        "functionCode": "// Resilient reader: support payloads where the webhook body is nested under `body` (string or object)\nvar raw = items[0].json || {};\nvar payload = raw;\ntry {\n  if (payload && typeof payload.body === 'string') {\n    try { payload = JSON.parse(payload.body); } catch (e) { /* ignore parse errors */ }\n  } else if (payload && typeof payload.body === 'object' && payload.body !== null) {\n    payload = payload.body;\n  }\n} catch (e) { /* ignore */ }\nvar text = '';\nvar from = '';\ntry {\n  var entries = payload.entry;\n  if (Array.isArray(entries) && entries.length > 0) {\n    var changes = entries[0].changes;\n    if (Array.isArray(changes) && changes.length > 0) {\n      var value = changes[0].value;\n      var messages = value && value.messages;\n      if (Array.isArray(messages) && messages.length > 0) {\n        var msg = messages[0];\n        if (msg && msg.text && msg.text.body) text = msg.text.body;\n        if (msg && msg.from) from = msg.from;\n      }\n    }\n  }\n} catch (e) { /* ignore */ }\n// Return parsed fields plus raw/payload for debugging\nreturn [{ json: { user_text: text, from: from, _raw: raw, _payload: payload } }];"
      },
      "id": "Normalize",
      "name": "Normalize Payload",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        976,
        -224
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://ollama:11434/v1/chat/completions",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.bodyObject }}",
        "options": {}
      },
      "id": "OllamaChat",
      "name": "Ollama Chat",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1424,
        -224
      ]
    },
    {
      "parameters": {
        "functionCode": "// Build exact body string for Ollama with fallbacks and debug info\nconst envModel = $env.OLLAMA_MODEL || 'llama3:8b-instruct-q4_0';\nlet user_text = $json.user_text || '';\nlet source = user_text ? 'user_text' : null;\ntry {\n  const candidates = [$json._payload, $json._raw, $json];\n  for (const cand of candidates) {\n    if (user_text) break;\n    if (!cand) continue;\n    let p = cand;\n    if (typeof p === 'string') { try { p = JSON.parse(p); } catch (e) { /* ignore */ } }\n    try {\n      const entries = p && p.entry;\n      if (Array.isArray(entries) && entries.length > 0) {\n        const changes = entries[0].changes;\n        if (Array.isArray(changes) && changes.length > 0) {\n          const value = changes[0].value;\n          const messages = value && value.messages;\n          if (Array.isArray(messages) && messages.length > 0) {\n            const msg = messages[0];\n            if (msg && msg.text && msg.text.body) { user_text = msg.text.body; source = 'payload.entry'; break; }\n            if (msg && msg.body && typeof msg.body === 'string') { user_text = msg.body; source = 'payload.entry.msg.body'; break; }\n          }\n        }\n      }\n    } catch(e) { /* ignore per-candidate */ }\n  }\n} catch(e) { /* ignore */ }\nif (!user_text) { // final fallback: look for common keys\n  if ($json && $json.message && typeof $json.message === 'string') { user_text = $json.message; source = 'message'; }\n}\nconst payload = {\n  model: envModel,\n  messages: [\n    { role: 'system', content: 'Kamu adalah agen lokal. Jawab singkat, jelas, sopan. Jika perlu langkah, beri bullet. Bahasa Indonesia.' },\n    { role: 'user', content: user_text || '' }\n  ],\n  temperature: 0.2\n};\nreturn [{ json: { bodyString: JSON.stringify(payload), bodyObject: payload, user_text_used: user_text, user_text_source: source, _input: $json } }];"
      },
      "id": "BuildBody",
      "name": "Build Ollama Body",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1200,
        -224
      ]
    },
    {
      "parameters": {
        "functionCode": "// Ollama returns { message: { content } } or { choices:[{message:{content}}] } depending on server\nconst res = items[0].json;\nlet answer = '';\nif (res && res.message && res.message.content) answer = res.message.content;\nelse if (res && Array.isArray(res.choices) && res.choices.length > 0) answer = (res.choices[0].message && res.choices[0].message.content) || '';\n\n// Safely read `from` from the Normalize Payload node, prefer $items(...) then fallback to $node\nlet from = '';\ntry {\n  const norm = ($items && $items(\"Normalize Payload\") && $items(\"Normalize Payload\")[0] && $items(\"Normalize Payload\")[0].json) || ($node && $node[\"Normalize Payload\"] && $node[\"Normalize Payload\"].json) || null;\n  if (norm) {\n    if (norm.from) {\n      from = norm.from;\n    } else {\n      const payload = norm._payload || norm._raw || norm;\n      const entries = payload && payload.entry;\n      if (Array.isArray(entries) && entries.length > 0) {\n        const changes = entries[0].changes;\n        if (Array.isArray(changes) && changes.length > 0) {\n          const value = changes[0].value;\n          const messages = value && value.messages;\n          if (Array.isArray(messages) && messages.length > 0) {\n            from = messages[0].from || '';\n          }\n        }\n      }\n    }\n  }\n} catch (e) { from = ''; }\n\nreturn [{ json: { from: from, final_answer: answer } }];"
      },
      "id": "FormatAnswer",
      "name": "Format Answer",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
  "position": [1648, -224]
    },
    {
      "parameters": {
		"method": "POST",
        "url": "=http://n8n:5678/webhook/message/receive",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"messaging_product\": \"whatsapp\",\n  \"to\": \"{{ $json.from }}\",\n  \"type\": \"text\",\n  \"text\": { \"body\": \"{{ $json.final_answer || '' }}\" }\n}",
        "options": {}
      },
      "id": "SendWA",
      "name": "Send WhatsApp",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1872,
        -224
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "Return",
      "name": "Return",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        2096,
        -224
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Normalize Payload": {
      "main": [
        [
          {
            "node": "Build Ollama Body",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Ollama Body": {
      "main": [
        [
          {
            "node": "Ollama Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat": {
      "main": [
        [
          {
            "node": "Format Answer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Answer": {
      "main": [
        [
          {
            "node": "Send WhatsApp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Trigger": {
      "main": [
        [
          {
            "node": "Normalize Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send WhatsApp": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2ab13eec-52f1-430f-886e-405498a58026",
  "meta": {
    "instanceId": "d1dd7e5dd6ef0a66e93ac6ffc18ee67dcd1875c66d0122ea6cac1a727c399b72"
  },
  "id": "NqRqKQVp2wlzjq1N",
  "tags": []
}
